package com.study.meiyx.learning.base;

/**
 *
 * 泛型，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？
 *java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。
 * 泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。
 */
public class TestGenerics {

    /**
     * 泛型类定义,泛型类声明
     * class 类名称 <泛型标识：可以随便写任意标识号，标识指定的泛型的类型>{
     * }
     *
     * 此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型
     * 在实例化泛型类时，必须指定T的具体类型
     * @param <T>
     */
    public class Generic<T>{
        //key这个成员变量的类型为T,T的类型由外部指定
        private T key;

        public Generic(T key) {
            this.key = key;
        }


        //虽然在方法中使用了泛型，但是这并不是一个泛型方法。
        //这只是类中一个普通的成员方法，只不过他的返回值是在声明泛型类已经声明过的泛型。
        //所以在这个方法中才可以继续使用 T 这个泛型。
        public T getKey(){
            return key;
        }

        /**
         * 所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），该类型参数声明部分在方法返回类型之前（在下面例子中的<E>）
         * 每一个类型参数声明部分包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符
         * 类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数类型的占位符。
         * 泛型方法体的声明和其他方法一样。注意类型参数只能代表引用型类型，不能是原始类型（像int,double,char的等）
         */
    }

    //泛型字段属性

    //泛型方法;定义方法时有形参，然后调用此方法时传递实参。
    //
    public static void main(String[] args) {

    }
}
